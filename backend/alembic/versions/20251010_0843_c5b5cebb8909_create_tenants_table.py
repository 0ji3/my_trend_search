"""create_tenants_table

Revision ID: c5b5cebb8909
Revises: 
Create Date: 2025-10-10 08:43:24.739099+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c5b5cebb8909'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_oauth_credentials_access_expires', table_name='oauth_credentials')
    op.drop_index('idx_oauth_credentials_is_valid', table_name='oauth_credentials')
    op.drop_index('idx_oauth_credentials_tenant_id', table_name='oauth_credentials')
    op.drop_table('oauth_credentials')
    op.drop_index('idx_ebay_accounts_last_synced', table_name='ebay_accounts')
    op.drop_index('idx_ebay_accounts_oauth_id', table_name='ebay_accounts')
    op.drop_index('idx_ebay_accounts_status', table_name='ebay_accounts')
    op.drop_index('idx_ebay_accounts_tenant_id', table_name='ebay_accounts')
    op.drop_table('ebay_accounts')
    op.drop_index('idx_daily_metrics_listing_date', table_name='daily_metrics')
    op.drop_index('idx_daily_metrics_listing_id', table_name='daily_metrics')
    op.drop_index('idx_daily_metrics_recorded_date', table_name='daily_metrics')
    op.drop_table('daily_metrics')
    op.drop_index('idx_trend_analysis_date', table_name='trend_analysis')
    op.drop_index('idx_trend_analysis_is_trending', table_name='trend_analysis')
    op.drop_index('idx_trend_analysis_listing_date', table_name='trend_analysis')
    op.drop_index('idx_trend_analysis_listing_id', table_name='trend_analysis')
    op.drop_index('idx_trend_analysis_rank', table_name='trend_analysis')
    op.drop_index('idx_trend_analysis_score', table_name='trend_analysis')
    op.drop_table('trend_analysis')
    op.drop_index('idx_tenants_email', table_name='tenants')
    op.drop_index('idx_tenants_status', table_name='tenants')
    op.drop_table('tenants')
    op.drop_index('idx_sync_jobs_account_id', table_name='sync_jobs')
    op.drop_index('idx_sync_jobs_created_at', table_name='sync_jobs')
    op.drop_index('idx_sync_jobs_status', table_name='sync_jobs')
    op.drop_table('sync_jobs')
    op.drop_index('idx_audit_logs_action', table_name='audit_logs')
    op.drop_index('idx_audit_logs_created_at', table_name='audit_logs')
    op.drop_index('idx_audit_logs_resource', table_name='audit_logs')
    op.drop_index('idx_audit_logs_tenant_id', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index('idx_notifications_created_at', table_name='notifications')
    op.drop_index('idx_notifications_is_read', table_name='notifications')
    op.drop_index('idx_notifications_tenant_id', table_name='notifications')
    op.drop_index('idx_notifications_type', table_name='notifications')
    op.drop_table('notifications')
    op.drop_index('idx_listings_account_id', table_name='listings')
    op.drop_index('idx_listings_category_id', table_name='listings')
    op.drop_index('idx_listings_is_active', table_name='listings')
    op.drop_index('idx_listings_item_id', table_name='listings')
    op.drop_index('idx_listings_item_specifics', table_name='listings', postgresql_using='gin')
    op.drop_index('idx_listings_listing_status', table_name='listings')
    op.drop_index('idx_listings_updated_at', table_name='listings')
    op.drop_table('listings')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('listings',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('item_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), server_default=sa.text("'USD'::character varying"), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('category_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('listing_type', sa.VARCHAR(length=50), server_default=sa.text("'FixedPriceItem'::character varying"), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('quantity_sold', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('listing_status', sa.VARCHAR(length=50), server_default=sa.text("'Active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gallery_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('view_item_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('item_specifics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('condition_id', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('condition_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['ebay_accounts.id'], name='listings_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='listings_pkey'),
    sa.UniqueConstraint('account_id', 'item_id', name='listings_account_id_item_id_key'),
    comment='eBay product listings',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_listings_updated_at', 'listings', ['updated_at'], unique=False)
    op.create_index('idx_listings_listing_status', 'listings', ['listing_status'], unique=False)
    op.create_index('idx_listings_item_specifics', 'listings', ['item_specifics'], unique=False, postgresql_using='gin')
    op.create_index('idx_listings_item_id', 'listings', ['item_id'], unique=False)
    op.create_index('idx_listings_is_active', 'listings', ['is_active'], unique=False)
    op.create_index('idx_listings_category_id', 'listings', ['category_id'], unique=False)
    op.create_index('idx_listings_account_id', 'listings', ['account_id'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('listing_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), server_default=sa.text("'info'::character varying"), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("notification_type::text = ANY (ARRAY['trend_alert'::character varying, 'sync_error'::character varying, 'token_expiring'::character varying, 'system'::character varying]::text[])", name='notifications_notification_type_check'),
    sa.CheckConstraint("severity::text = ANY (ARRAY['info'::character varying, 'warning'::character varying, 'error'::character varying, 'success'::character varying]::text[])", name='notifications_severity_check'),
    sa.ForeignKeyConstraint(['listing_id'], ['listings.id'], name='notifications_listing_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='notifications_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey'),
    comment='User notifications and alerts'
    )
    op.create_index('idx_notifications_type', 'notifications', ['notification_type'], unique=False)
    op.create_index('idx_notifications_tenant_id', 'notifications', ['tenant_id'], unique=False)
    op.create_index('idx_notifications_is_read', 'notifications', ['is_read'], unique=False)
    op.create_index('idx_notifications_created_at', 'notifications', [sa.text('created_at DESC')], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='audit_logs_tenant_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey'),
    comment='Audit trail for security and compliance'
    )
    op.create_index('idx_audit_logs_tenant_id', 'audit_logs', ['tenant_id'], unique=False)
    op.create_index('idx_audit_logs_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_logs_created_at', 'audit_logs', [sa.text('created_at DESC')], unique=False)
    op.create_index('idx_audit_logs_action', 'audit_logs', ['action'], unique=False)
    op.create_table('sync_jobs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('job_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('items_processed', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('items_total', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("job_type::text = ANY (ARRAY['full_sync'::character varying, 'incremental_sync'::character varying, 'metrics_sync'::character varying]::text[])", name='sync_jobs_job_type_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'running'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='sync_jobs_status_check'),
    sa.ForeignKeyConstraint(['account_id'], ['ebay_accounts.id'], name='sync_jobs_account_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sync_jobs_pkey'),
    comment='Data synchronization job tracking'
    )
    op.create_index('idx_sync_jobs_status', 'sync_jobs', ['status'], unique=False)
    op.create_index('idx_sync_jobs_created_at', 'sync_jobs', [sa.text('created_at DESC')], unique=False)
    op.create_index('idx_sync_jobs_account_id', 'sync_jobs', ['account_id'], unique=False)
    op.create_table('tenants',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('business_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), server_default=sa.text("'UTC'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'suspended'::character varying]::text[])", name='tenants_status_check'),
    sa.PrimaryKeyConstraint('id', name='tenants_pkey'),
    sa.UniqueConstraint('email', name='tenants_email_key'),
    comment='User accounts (tenant/multi-tenant support)',
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_tenants_status', 'tenants', ['status'], unique=False)
    op.create_index('idx_tenants_email', 'tenants', ['email'], unique=False)
    op.create_table('trend_analysis',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('listing_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('analysis_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('view_growth_rate', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('watch_growth_rate', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('view_7day_avg', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('watch_7day_avg', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('view_30day_avg', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('watch_30day_avg', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('price_momentum', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('trend_score', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Composite score: (view_growth * 0.4) + (watch_growth * 0.4) + (price_momentum * 0.2)'),
    sa.Column('rank', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_trending', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('trend_direction', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("trend_direction::text = ANY (ARRAY['up'::character varying, 'down'::character varying, 'stable'::character varying, 'new'::character varying]::text[])", name='trend_analysis_trend_direction_check'),
    sa.ForeignKeyConstraint(['listing_id'], ['listings.id'], name='trend_analysis_listing_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='trend_analysis_pkey'),
    sa.UniqueConstraint('listing_id', 'analysis_date', name='trend_analysis_listing_id_analysis_date_key'),
    comment='Calculated trend scores and rankings'
    )
    op.create_index('idx_trend_analysis_score', 'trend_analysis', [sa.text('trend_score DESC')], unique=False)
    op.create_index('idx_trend_analysis_rank', 'trend_analysis', ['rank'], unique=False)
    op.create_index('idx_trend_analysis_listing_id', 'trend_analysis', ['listing_id'], unique=False)
    op.create_index('idx_trend_analysis_listing_date', 'trend_analysis', ['listing_id', 'analysis_date'], unique=False)
    op.create_index('idx_trend_analysis_is_trending', 'trend_analysis', ['is_trending'], unique=False)
    op.create_index('idx_trend_analysis_date', 'trend_analysis', ['analysis_date'], unique=False)
    op.create_table('daily_metrics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('listing_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('recorded_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('view_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('watch_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('bid_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('question_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('current_price', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('quantity_available', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity_sold', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('impression_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('click_through_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['listing_id'], ['listings.id'], name='daily_metrics_listing_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='daily_metrics_pkey'),
    sa.UniqueConstraint('listing_id', 'recorded_date', name='daily_metrics_listing_id_recorded_date_key'),
    comment='Daily performance metrics (views, watches, etc.)'
    )
    op.create_index('idx_daily_metrics_recorded_date', 'daily_metrics', ['recorded_date'], unique=False)
    op.create_index('idx_daily_metrics_listing_id', 'daily_metrics', ['listing_id'], unique=False)
    op.create_index('idx_daily_metrics_listing_date', 'daily_metrics', ['listing_id', 'recorded_date'], unique=False)
    op.create_table('ebay_accounts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('oauth_credential_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ebay_user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('account_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('site_id', sa.VARCHAR(length=10), server_default=sa.text("'EBAY_US'::character varying"), autoincrement=False, nullable=True),
    sa.Column('marketplace', sa.VARCHAR(length=50), server_default=sa.text("'US'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_synced_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('sync_status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('sync_error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['active'::character varying, 'inactive'::character varying, 'error'::character varying]::text[])", name='ebay_accounts_status_check'),
    sa.CheckConstraint("sync_status::text = ANY (ARRAY['pending'::character varying, 'syncing'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])", name='ebay_accounts_sync_status_check'),
    sa.ForeignKeyConstraint(['oauth_credential_id'], ['oauth_credentials.id'], name='ebay_accounts_oauth_credential_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='ebay_accounts_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ebay_accounts_pkey'),
    sa.UniqueConstraint('tenant_id', 'ebay_user_id', name='ebay_accounts_tenant_id_ebay_user_id_key'),
    comment='Connected eBay seller accounts'
    )
    op.create_index('idx_ebay_accounts_tenant_id', 'ebay_accounts', ['tenant_id'], unique=False)
    op.create_index('idx_ebay_accounts_status', 'ebay_accounts', ['status'], unique=False)
    op.create_index('idx_ebay_accounts_oauth_id', 'ebay_accounts', ['oauth_credential_id'], unique=False)
    op.create_index('idx_ebay_accounts_last_synced', 'ebay_accounts', ['last_synced_at'], unique=False)
    op.create_table('oauth_credentials',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('access_token_encrypted', postgresql.BYTEA(), autoincrement=False, nullable=False, comment='AES-256-GCM encrypted access token'),
    sa.Column('access_token_iv', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('access_token_auth_tag', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('refresh_token_encrypted', postgresql.BYTEA(), autoincrement=False, nullable=False, comment='AES-256-GCM encrypted refresh token'),
    sa.Column('refresh_token_iv', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('refresh_token_auth_tag', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('access_token_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('refresh_token_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('scopes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=False),
    sa.Column('is_valid', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_refreshed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='oauth_credentials_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='oauth_credentials_pkey'),
    sa.UniqueConstraint('tenant_id', name='oauth_credentials_tenant_id_key'),
    comment='Encrypted eBay OAuth tokens'
    )
    op.create_index('idx_oauth_credentials_tenant_id', 'oauth_credentials', ['tenant_id'], unique=False)
    op.create_index('idx_oauth_credentials_is_valid', 'oauth_credentials', ['is_valid'], unique=False)
    op.create_index('idx_oauth_credentials_access_expires', 'oauth_credentials', ['access_token_expires_at'], unique=False)
    # ### end Alembic commands ###
